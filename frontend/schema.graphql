

type Query {
    viewer: Viewer!
	user(id: ID!): User
    users(searchTerm: String, first: Int!, after: String): UsersConnection
}

type UsersConnection {
    pageInfo: PageInfo
    edges: [UsersEdge]
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String!
    endCursor: String!
}

type UsersEdge {
    node: User
    cursor: String!
}

type DekverklaringenConnection {
	pageInfo: PageInfo
	edges: [DekverklaringenEdge]
}

type DekverklaringenEdge {
	node: Dekverklaring
	cursor: String!
}

type Dekverklaring {
	id: ID!
	season: Int!
	studbook: Studbook!
	date_sent: Date!
	date_corrected: Date
}

input DekverklaringInput {
	season: Int!
	studbook: Studbook!

	name: String!
	kovo: Int!
	koe: Int!
	kool: Int!
	korl: Int!
	
	dekgroepen: [DekgroepInput!]!

	remarks: String!
}

input DekgroepInput {
	ewe_count: Int!
	rammen: [String!]!
}

enum Studbook {
	DRENTS_HEIDESCHAAP
	SCHOONEBEEKER
}

scalar Date

type Viewer {
    user: User

	dekverklaringen(first: Int!, after: String): DekverklaringenConnection
}

type StudbookMembership {
	ko: Boolean!
}

type User {
    id: ID!
    email: String!
	name: String!
   	
	studbook_heideschaap: StudbookMembership
	studbook_schoonebeeker: StudbookMembership

	role_website_contributor: Boolean!
	role_studbook_administrator: Boolean!
	role_studbook_inspector: Boolean!
}

input StudbookMembershipInput {
	ko: Boolean!
}

input UserInput {
	email: String!
	name: String!

	studbook_heideschaap: StudbookMembershipInput
	studbook_schoonebeeker: StudbookMembershipInput

	role_website_contributor: Boolean!
	role_studbook_administrator: Boolean!
	role_studbook_inspector: Boolean!
}

type SuccessLoginResult {
    user: User!
}

enum FailedLoginReason {
    INVALID_CREDENTIALS
}

type FailedLoginResult {
    reason: FailedLoginReason
}

union LoginResult = SuccessLoginResult | FailedLoginResult

type SuccessSendDekverklaringResult {
	dekverklaring: Dekverklaring
}

enum FailedSendDekverklaringReason {
	UNKNOWN
}

type FailedSendDekverklaringResult {
	reason: FailedSendDekverklaringReason
}

union SendDekverklaringResult = SuccessSendDekverklaringResult | FailedSendDekverklaringResult

type SuccessAddUserResult {
	user: User
}

enum FailedAddUserReason {
	UNKNOWN
	UNAUTHORIZED
	EMAIL_IN_USE
}

type FailedAddUserResult {
	reason: FailedAddUserReason
}

union AddUserResult = SuccessAddUserResult | FailedAddUserResult

type SuccessUpdateUserResult {
	user: User
}

enum FailedUpdateUserReason {
	UNKNOWN
	UNAUTHORIZED
	EMAIL_IN_USE
}

type FailedUpdateUserResult {
	reason: FailedUpdateUserReason
}

union UpdateUserResult = SuccessUpdateUserResult | FailedUpdateUserResult

type Mutation {
    login(email: String, password: String): LoginResult
    logout: Boolean

	sendDekverklaring(dekverklaring: DekverklaringInput!): SendDekverklaringResult

	addUser(user: UserInput!): AddUserResult
	updateUser(id: ID!, user: UserInput!): UpdateUserResult
}

schema {
    query: Query
    mutation: Mutation
}
